<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello blog</title>
    <url>/2022/10/22/Hello-blog/</url>
    <content><![CDATA[<h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><h2 id="网络安全汇总"><a href="#网络安全汇总" class="headerlink" title="网络安全汇总"></a>网络安全汇总</h2><ul>
<li>XSS</li>
<li>CSRF</li>
<li>iframe安全</li>
<li>SQL注入</li>
<li>OS注入</li>
<li>请求劫持</li>
<li>DDOS  </li>
<li>中间人攻击<span id="more"></span></li>
</ul>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote>
<p>Cross Site Scripting 又叫做跨站脚本攻击,本身应该叫做CSS,但是由于CSS被占用,无奈下叫做XSS</p>
</blockquote>
<h4 id="xss危害"><a href="#xss危害" class="headerlink" title="xss危害"></a>xss危害</h4><ul>
<li>利⽤虚假输⼊表单骗取⽤户个⼈信息。</li>
<li>利⽤脚本窃取⽤户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li>
<li>显示伪造的⽂章或图⽚。</li>
</ul>
<h4 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h4><ol>
<li>存储型（Server端）<ul>
<li>场景： 见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。 </li>
<li>攻击步骤：<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，服务端将恶意代码从数据库中取出来，拼接在HTML中返回给浏览器</li>
<li>用户浏览器在收到响应后解析执行，混在其中的恶意代码也同时被执行</li>
<li>恶意代码窃取用户数据，并发送到指定攻击者的网站，或者冒充用户行为，调用目标网站的接口，执行恶意操作</li>
</ol>
</li>
</ul>
</li>
<li>反射型（Server端）<ul>
<li>与存储型的区别在于，存储型的恶意代码存储在数据库中，反射型的恶意代码在URL上</li>
<li>场景： 通过 URL 传递参数的功能，如网站搜索、跳转等。</li>
<li>攻击步骤：<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
</li>
</ul>
</li>
<li>Dom型（浏览器端）<ul>
<li>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</li>
<li>场景：通过 URL 传递参数的功能，如网站搜索、跳转等。</li>
<li>攻击步骤：<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL。 </li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。 </li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><blockquote>
<p>防止攻击者提交恶意代码，防止浏览器执行恶意代码</p>
</blockquote>
<ul>
<li>设置HEAD  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">0</span>) <span class="comment">// 禁⽌XSS过滤</span></span><br></pre></td></tr></table></figure></li>
<li>设置HttpOnly Cookie  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是预防XSS攻击窃取⽤户cookie最有效的防御⼿段。Web应 ⽤程序在设置cookie时，将其属性设为HttpOnly，就可以避免该⽹⻚的cookie被客户端恶意JavaScript窃取，保护⽤户cookie信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">response.<span class="title function_">addHeader</span>(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;uid=112; Path=/; HttpOnly&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>CSP<ul>
<li>内容安全策略 (CSP, Content Security Policy) 是⼀个附加的安全层，⽤于帮助检测和缓解某些类型的攻击，包括跨站脚本 (XSS) 和数据注⼊等攻击。 这些攻击可⽤于实现从数据窃取到⽹站破坏或作为恶意软件分发版本等⽤途。</li>
<li>CSP 本质上就是建⽴⽩名单，由浏览器进行拦截。开发者明确告诉浏览器哪些外部资源可以加载和执⾏。我们只需要配置规则，如何拦截是由浏览器⾃⼰实现的。我们可以通过这种⽅式来尽量减少 XSS 攻击。</li>
<li>Content-Security-Policy: default-src ‘self’ -所有内容均来自站点的同一个源（不包括其子域名）</li>
<li>Content-Security-Policy: default-src ‘self’ *.trusted.com-允许内容来自信任的域名及其子域名 (域名不必须与CSP设置所在的域名相同)</li>
<li>Content-Security-Policy: default-src <a href="https://link.juejin.cn/?target=https://xxxx.com-%25E8%25AF%25A5%25E6%259C%258D%25E5%258A%25A1%25E5%2599%25A8%25E4%25BB%2585%25E5%2585%2581%25E8%25AE%25B8%25E9%2580%259A%25E8%25BF%2587HTTPS%25E6%2596%25B9%25E5%25BC%258F%25E5%25B9%25B6%25E4%25BB%2585%25E4%25BB%258Exxxx.com%25E5%259F%259F%25E5%2590%258D%25E6%259D%25A5%25E8%25AE%25BF%25E9%2597%25AE%25E6%2596%2587%25E6%25A1%25A3" title="https://xxxx.com-%E8%AF%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%85%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87HTTPS%E6%96%B9%E5%BC%8F%E5%B9%B6%E4%BB%85%E4%BB%8Exxxx.com%E5%9F%9F%E5%90%8D%E6%9D%A5%E8%AE%BF%E9%97%AE%E6%96%87%E6%A1%A3">xxxx.com-该服务器仅允许通过HTTPS方式并仅从xxxx.com域名来访问文档</a></li>
</ul>
</li>
<li>对数据进行严格的输出编码：如HTML元素的编码，JS编码，CSS编码，URL编码等等<br>  <code>避免拼接 HTML； * Vue/React 技术栈，避免使用 v-html / dangerouslySetInnerHTML</code></li>
<li>输入验证：比如一些常见的数字、URL、电话号码、邮箱地址等等做校验判断</li>
<li>验证码</li>
</ul>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote>
<p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是⼀种常⻅的Web攻击，它利⽤⽤户已登录的身份，在⽤户毫不知情的情况下，以⽤户的名义完成⾮法操作</p>
</blockquote>
<h4 id="CSRF定义"><a href="#CSRF定义" class="headerlink" title="CSRF定义"></a>CSRF定义</h4><p>还是从字面上去分析,跨站还是指从一个网站指向另外一个网站,于XSS不同的是,他是请求,指我们在别的网站上发出一个请求,而这个请求是伪造出来的</p>
<p>⽤户已经登录了站点 A，并在本地记录了 cookie</p>
<p>在⽤户没有登出站点 A 的情况下（也就是 cookie ⽣效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。</p>
<p>站点 A 没有做任何 CSRF 防御</p>
<p>攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>
<h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol>
<li>受害者登录 a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问了b.com </li>
<li>b.com 向 a.com 发送了一个请求：a.com&#x2F;act&#x3D;xx浏览器会默认携带a.com的Cookie </li>
<li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求 </li>
<li>a.com以受害者的名义执行了act&#x3D;xx </li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作</li>
</ol>
<h4 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h4><ol>
<li>ET型：如在页面的某个 img 中发起一个 get 请求 </li>
<li>POST型：通过自动提交表单到恶意网站 </li>
<li>链接型：需要诱导用户点击链接</li>
</ol>
<h4 id="CSRF危害"><a href="#CSRF危害" class="headerlink" title="CSRF危害"></a>CSRF危害</h4><ul>
<li>利⽤⽤户登录状态 </li>
<li>⽤户不知情 </li>
<li>完成业务请求 </li>
<li>盗取⽤户资⾦（转账，消费）</li>
<li>冒充⽤户发帖背锅 </li>
<li>损害⽹站声誉</li>
</ul>
<h4 id="防御CSRF"><a href="#防御CSRF" class="headerlink" title="防御CSRF"></a>防御CSRF</h4><blockquote>
<p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。</p>
</blockquote>
<ol>
<li>禁⽌第三⽅⽹站带Cookie - 有兼容性问题 Samesite Cookie属性： Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性 它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie Samesite 有两个属性值，Strict 为任何情况下都不可以作为第三方 Cookie ，Lax 为可以作为第三方 Cookie，但必须是Get请求 </li>
<li>Referer Check - Https不发送referer </li>
<li>验证码</li>
<li>同源检测：通过Header中的Origin Header 、Referer Header 确定，但不同浏览器可能会有不一样的实现，不能完全保证 </li>
<li>CSRF Token 校验：将CSRF Token输出到页面中（通常保存在Session中），页面提交的请求携带这个Token，服务器验证Token是否正确 </li>
<li>双重cookie验证：<br>  流程：<br>  步骤1：在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie&#x3D;v8g9e4ksfhw）<br>  步骤2：在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST <a href="https://www.a.com/comment?csrfcookie=v8g9e4ksfhw%EF%BC%89">https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）</a><br>  步骤3：后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。<br> 优点：<br>   1）、无需使用Session，适用面更广，易于实施<br>   2）、Token储存于客户端中，不会给服务器带来压力。<br>   3）、相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。<br> 缺点：<br> 1）、Cookie中增加了额外的字段。<br> 2）、如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。<br> 3）、难以做到子域名的隔离。<br> 4）、为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</li>
</ol>
<h3 id="iframe安全"><a href="#iframe安全" class="headerlink" title="iframe安全"></a>iframe安全</h3><h4 id="iframe劫持"><a href="#iframe劫持" class="headerlink" title="iframe劫持"></a>iframe劫持</h4><ol>
<li>嵌入第三方 iframe 会有很多不可控的问题，同时当第三方 iframe 出现问题或是被劫持之后，也会诱发安全性问题 </li>
<li>点击劫持 点击劫持是⼀种视觉欺骗的攻击⼿段。 攻击者将需要攻击的⽹站通过iframe嵌套的⽅式嵌⼊⾃⼰的⽹⻚中，并将 iframe 设置为透明，在⻚⾯中透出⼀个按钮诱导⽤户点击。 </li>
<li>禁止自己的 iframe 中的链接外部网站的JS</li>
</ol>
<h4 id="预防方案"><a href="#预防方案" class="headerlink" title="预防方案"></a>预防方案</h4><ol>
<li>为 iframe 设置 sandbox 属性，通过它可以对iframe的行为进行各种限制，充分实现“最小权限“原则 </li>
<li>服务端设置 X-Frame-Options Header头，拒绝页面被嵌套，X-Frame-Options 是HTTP 响应头中用来告诉浏览器一个页面是否可以嵌入 &lt;iframe&gt; 中 eg.X-Frame-Options: SAMEORIGIN SAMEORIGIN: iframe 页面的地址只能为同源域名下的页面 ALLOW-FROM: 可以嵌套在指定来源的 iframe 里 DENY: 当前页面不能被嵌套在 iframe 里 </li>
<li>设置 CSP 即 Content-Security-Policy 请求头 </li>
<li>减少对 iframe 的使用</li>
</ol>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote>
<p>sql是我们学习数据库的一种语言,而注入就代表是从前端对数据库下手<br>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗数据库服务器执行恶意的SQL命令,从而达到和服务器 进行直接的交互</p>
</blockquote>
<h4 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h4><p>其实防御起来很简单,每个语言都提供了不同的方式,但是原理就是**<em>不进行字符串拼接,而是用占位符</em>**</p>
<ol>
<li>严格限制Web应⽤的数据库的操作权限**，给此⽤户提供仅仅能够满⾜其⼯作的最低权限，从⽽最⼤限度的减少注⼊攻击对数据库的危害 </li>
<li>对进⼊数据库的特殊字符（’，”，\，&lt;，&gt;，&amp;，*，; 等）进⾏转义处理，或编码转换**。基本上所有的后端语⾔都有对字符串进⾏转义处理的⽅法，⽐如 lodash 的 lodash._escapehtmlchar库。 </li>
<li>后端代码检查输⼊的数据是否符合预期**，严格限制变量的类型，例如使⽤正则表达式进⾏⼀些匹配处理。</li>
</ol>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><blockquote>
<p>在 http 数据提交给 TCP 层之后，会经过用户电脑、路由器、运营商、服务器，这中间每一个环节，都不是安全的<br>一句话就是：<strong>在 http 传输过程中容易被中间人窃取、伪造、篡改</strong>，这种攻击方式称为<code>中间人攻击</code>。<br>那怎么让数据可以更安全的传输呢？<br>就是使用 https ，利用 https 安全层对数据进行加解密操作，以保证数据安全。<br>关于 https性能优化、版本、优缺点、SSL&#x2F;TLS、握手(RSA、TLS1.2、TLS1.3)三个版本及优化等等，文章太长这里就不展开了，可以看我另一篇文章有详细介绍</p>
</blockquote>
<h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><p>就是加密和解密使用同一个密钥。如<code>AES、DES</code>。加解密过程：</p>
<ol>
<li>浏览器给服务器并发送一个随机数<code>client-random</code>和<code>加密套件</code>(一个支持的加密方法列表)</li>
<li>服务器生成给浏览器返回另一个随机数<code>server-random</code>和<code>加密套件</code></li>
<li>两边分别返回确认消息。然后两者用加密方法将两个随机数混合生成密钥，这就是通信双上加解密的密钥</li>
</ol>
<p>有了密钥之后就可以对数据进行加密传输了</p>
<p>问题是<code>client-random</code>和<code>server-random</code>都是明文的，双方如何安全的传递两个随机数和加密方法呢？直接传给客户端，那过程中就很可能被窃取，中间人还是能解密拿到数据，往下看</p>
<h4 id="不对称加密算法"><a href="#不对称加密算法" class="headerlink" title="不对称加密算法"></a>不对称加密算法</h4><p>就是一对密钥，有<code>公钥</code>(public key)和<code>私钥</code>(private key)，其中一个密钥加密后的数据，只能用另一个密钥进行解密。如<code>RSA</code>、<code>ECDHE</code>。加解密过程：</p>
<ol>
<li>浏览器给服务器发送<code>加密套件</code></li>
<li>服务器选好支持的<code>加密方法</code>和<code>公钥</code>(明文) 传给浏览器</li>
<li>两边分别返回确认消息。然后浏览器用公钥对数据进行加密，这个密钥只能用<code>私钥</code>解密</li>
</ol>
<p>这是不是看上去很完美了</p>
<p>其实还存在很严重的问题</p>
<ol>
<li>使用公钥反推出私钥是非常困难，但不是做不到，随着计算机运算能力提高，非对称密钥<code>至少要2048位才能保证安全性</code>，这就导致加解密速度慢，效率太低</li>
<li>无法保证服务器发送给浏览器的数据安全。因为浏览器可以用公钥来加密，而服务器就只能用私钥加密，公钥是明文传输的，中间人可以获取到，这样服务器端的数据安全就得不到保证了</li>
</ol>
<p>所以！</p>
<h4 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h4><p>TLS实际用的是<code>两种算法的混合加密</code>。<strong>通过 非对称加密算法 交换 对称加密算法 的密钥，交换完成后，再使用对称加密进行加解密传输数据</strong>。这样就保证了会话的机密性。过程如下</p>
<ol>
<li>浏览器给服务器发送一个随机数<code>client-random</code>、<code>对称和非对称加密套件</code></li>
<li>服务器把另一个随机数<code>server-random</code>、<code>加密套件</code>、<code>公钥</code>传给浏览器</li>
<li>浏览器又生成另一个随机数<code>pre-random</code>，并用公钥对 <code>pre-random</code> 加密后传给服务器</li>
<li>服务器再用私钥解密，得到<code>pre-random</code>，并返回确认消息</li>
<li>这样浏览器和服务器都有三个随机数了，然后各自将三个随机数用加密方法混合生成最终的对称密钥</li>
</ol>
<p>然后开始数据加密传输</p>
<p>这样即便被截持，中间人没有私钥就拿不到<code>pre-random</code>，就无法生成最终密钥</p>
<p>这样就安全了吗？</p>
<p>emmmm……还没</p>
<p>因为问题又来了，如果一开始DNS就被<code>中间人劫持</code>，那么请求被中间人截获，中间人把他自己的服务器公钥给了浏览器，浏览器收到公钥就把信息发给中间人了，中间人解密拿到数据，并干了一些见不得人的勾当之后，再请求实际服务器，拿到服务器公钥，再把加密处理过后的数据发给服务器</p>
<p>这样不知不觉间信息就被人窃取了，所以在结合对称和非对称加密的基础上，还需要服务器向浏览器证明身份，那怎么证明呢？</p>
<p>所以<code>数字证书</code>来了，往下看</p>
<h4 id="如何保证数据是否被篡改？"><a href="#如何保证数据是否被篡改？" class="headerlink" title="如何保证数据是否被篡改？"></a>如何保证数据是否被篡改？</h4><h5 id="数字证书-数字签名"><a href="#数字证书-数字签名" class="headerlink" title="数字证书(数字签名)"></a>数字证书(数字签名)</h5><p>它可以帮我们<code>验证服务器身份</code>，而且数字证书里包含了公钥，而数字证书需要向有权威的<code>认证机构(CA)</code>获取授权给服务器。</p>
<p>相比之前就变成了</p>
<ul>
<li>服务器不直接返回公钥给浏览器，而是返回数字证书，而公钥就在数字证书中</li>
<li>浏览器这边多了一步证书验证，验证成功才能继续后续流程</li>
</ul>
<h3 id="那么如何申请数字证书呢？"><a href="#那么如何申请数字证书呢？" class="headerlink" title="那么如何申请数字证书呢？"></a>那么如何申请数字证书呢？</h3><ul>
<li>首先，服务器准备一套<code>公钥</code>和<code>私钥</code>，私钥留着自己用</li>
<li>服务器将公钥和站点等信息提交给CA认证，这个是<code>要钱</code>的</li>
<li>CA<code>验证</code>服务器提供的信息</li>
<li>审核通过后签发认证的数字证书，包含了<code>公钥</code>、<code>CA信息</code>、<code>有效时间</code>、<code>证书序列</code>等这些都是明文的，还有一个CA生成的<code>签名</code></li>
</ul>
<h5 id="CA的签名过程"><a href="#CA的签名过程" class="headerlink" title="CA的签名过程"></a>CA的签名过程</h5><ul>
<li>CA也有一套<code>公钥</code>和<code>私钥</code></li>
<li>CA使用摘要算法计算服务器提交的明文信息并得出<code>信息摘要</code></li>
<li>然后CA再用它的私钥和特定的算法对信息摘要加密，生成<code>签名</code></li>
<li>把<code>签名</code>、<code>服务器公钥</code>等信息打包<code>放入数字证书</code>，并返回给服务器</li>
<li>服务器配置好证书，以后浏览器连接服务器，都先把证书发给客户端验证</li>
</ul>
<blockquote>
<p>摘要算法：主要用于保证信息的完整性。常见的<strong>MD5算法</strong>、<strong>散列函数</strong>、<strong>hash函数</strong>都属于这类算法，其特点就是<code>单向性</code>、<code>无法反推原文</code></p>
</blockquote>
<h5 id="浏览器如何验证数字证书"><a href="#浏览器如何验证数字证书" class="headerlink" title="浏览器如何验证数字证书"></a>浏览器如何验证数字证书</h5><ul>
<li>浏览器连接服务器，都先把证书发给客户端验证</li>
<li>使用<strong>CA公钥</strong>和声明的签名算法对CA中的签名进行<strong>解密</strong>，得到服务器的<code>摘要内容</code>和服务器公钥</li>
<li>再用摘要算法对证书里的服务器公钥生成摘要，再把这个摘要和上一步得到的摘要<code>对比</code></li>
<li>然后将两个信息摘要对比，如果是一致的，就说明证书是合法的，即证明了服务器自己，否则就是非法的</li>
</ul>
<p>证书认证又分为<code>单向认证</code>和<code>双向认证</code></p>
<p><strong>单向认证</strong>：服务器发送证书，客户端验证证书<br><strong>双向认证</strong>：服务器和客户端分别提供证书给对方，并互相验证对方的证书</p>
<p><strong>不过大多数https服务器都是单向认证，如果服务器需要验证客户端的身份，一般通过用户名、密码、手机验证码等之类的凭证来验证。只有更高级别的要求的系统，比如大额网银转账等，就会提供双向认证的场景，来确保对客户身份提供认证性</strong></p>
<p>另外在申请和使用证书的过程中，需要注意</p>
<ul>
<li>申请数字证书是不需要提供私钥的，<strong>要确保私钥永远只能由服务器掌握</strong></li>
<li><strong>数字证书最核心的是CA使用它的私钥生成的数字签名</strong></li>
<li>内置CA对应的证书称为根证书，根证书是最权威的机构，它们自己为自己签名，这称为<code>自签名证书</code></li>
</ul>
<p>有了这些之后就安全了吗？</p>
<p>emmmmm…..没有</p>
<p>虽然不是绝对安全，但是现行架构下最安全的解决文案了，大大增加了中间人的攻击成本</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端常见问题</title>
    <url>/2023/03/21/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><blockquote>
<p>优点：能够快速区分基本数据类型 缺点：不能将Object、Array和Null区分，都返回object</p>
</blockquote>
<ol>
<li><p><code>typeof</code>的作用？</p>
<p>区分数据类型，可以返回7种数据类型：<code>number、string、boolean、undefined、object、function</code> ，以及 <code>ES6</code> 新增的 <code>symbol</code></p>
</li>
<li><p><code>typeof</code> 能正确区分数据类型吗？</p>
<p>不能。对于原始类型，除 <code>null</code> 都可以正确判断；对于引用类型，除 <code>function</code> 外，都会返回 <code>&quot;object&quot;</code></p>
</li>
<li><p><code>typeof</code> 注意事项</p>
<ul>
<li><code>typeof</code> 返回值为 <code>string</code> 格式，注意类似这种考题: <code>typeof(typeof(undefined)) -&gt; &quot;string&quot;</code></li>
<li><code>typeof</code> 未定义的变量不会报错，返回 <code>&quot;undefiend&quot;</code></li>
<li><code>typeof(null) -&gt; &quot;object&quot;</code>: 遗留已久的 <code>bug</code> </li>
<li><code>typeof</code>无法区别数组与普通对象: <code>typeof([]) -&gt; &quot;object&quot;</code></li>
<li><code>typeof(NaN) -&gt; &quot;number&quot;</code></li>
</ul>
</li>
</ol>
<span id="more"></span>
<h4 id="typeof为什么对null错误的显示"><a href="#typeof为什么对null错误的显示" class="headerlink" title="typeof为什么对null错误的显示"></a>typeof为什么对null错误的显示</h4><p>这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object</p>
<ol>
<li><p>typeof(‘abc’)和 typeof ‘abc’都是 string, 那么 typeof 是操作符还是函数？(2020.01.12)</p>
<blockquote>
<p>分析：<code>typeof</code> 在以前学习时，老师就讲过 <code>typeof</code> 是操作符，但是问题在于它还能使用函数调用的方式进行使用，那到底是不是函数那？如果不是，为什么？</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>解答：</p>
<ol>
<li><p><code>typeof</code> 的返回值之一为<code>&#39;function&#39;</code>，如果 <code>typeof</code> 为 <code>function</code>，那么 <code>typeof(typeof)</code> 会返回<code>&#39;function&#39;</code>，但是经测试，上述代码浏览器会抛出错误。因此可以证明 <code>typeof</code> 并非函数。</p>
</li>
<li><p>既然 <code>typeof</code> 不是函数，那 <code>typeof</code> 后面的括号的作用是？</p>
<blockquote>
<p>括号的作用是进行分组而非函数的调用。—— 《javascript 高级程序设计》</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举个例子</span></span><br><span class="line"><span class="keyword">typeof</span> (((func))); <span class="comment">// is equal to typeof func</span></span><br></pre></td></tr></table></figure>

<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>优点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象 缺点：Number，Boolean，String基本数据类型不能判断</p>
</blockquote>
<ol>
<li><code>instanceof</code> 判断对象的原型链上是否存在构造函数的原型。只能判断引用类型。</li>
<li><code>instanceof</code> 常用来判断 <code>A</code> 是否为 <code>B</code> 的实例</li>
</ol>
<h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><blockquote>
<p>优点：精准判断数据类型 缺点：写法繁琐不容易记，推荐进行封装后使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toString.<span class="title function_">call</span>(<span class="function">()=&gt;</span>&#123;&#125;)       <span class="comment">// [object Function]</span></span><br><span class="line">toString.<span class="title function_">call</span>(&#123;&#125;)           <span class="comment">// [object Object]</span></span><br><span class="line">toString.<span class="title function_">call</span>([])           <span class="comment">// [object Array]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="string">&#x27;&#x27;</span>)           <span class="comment">// [object String]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="number">22</span>)           <span class="comment">// [object Number]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="literal">undefined</span>)    <span class="comment">// [object undefined]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="literal">null</span>)         <span class="comment">// [object null]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>)     <span class="comment">// [object Date]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="title class_">Math</span>)         <span class="comment">// [object Math]</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="variable language_">window</span>)       <span class="comment">// [object Window]</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h2><ol>
<li>基本数据类型：共有7种</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span> <span class="title class_">Number</span> <span class="title class_">String</span> <span class="literal">undefined</span> <span class="literal">null</span> <span class="title class_">Bigint</span> <span class="title class_">Symbol</span></span><br></pre></td></tr></table></figure>

<p>Symbol ： ES6 引入的一种新的原始值，表示独一无二的值，主要为了解决属性名冲突问题。 Bigint ：ES2020 新增加，是比 Number 类型的整数范围更大。</p>
<ol start="2">
<li>引用数据类型：1种</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>对象(包括普通<span class="title class_">Object</span>、<span class="title class_">Function</span>、<span class="title class_">Array</span>、<span class="title class_">Date</span>、<span class="title class_">RegExp</span>、<span class="title class_">Math</span>)</span><br></pre></td></tr></table></figure>

<h2 id="x3D-x3D-的隐式转换规则"><a href="#x3D-x3D-的隐式转换规则" class="headerlink" title="&#x3D;&#x3D; 的隐式转换规则"></a>&#x3D;&#x3D; 的隐式转换规则</h2><ol>
<li><code>==</code>: 只需要值相等，无需类型相等；<code>null, undefined</code> 在 <code>==</code> 下互相等且自身等</li>
<li><code>==</code> 的转换规则:</li>
</ol>
<table>
<thead>
<tr>
<th>被比较数B</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td>Number</td>
<td>String</td>
<td>Boolean</td>
<td>Object</td>
</tr>
<tr>
<td>比较数A</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Number</td>
<td>A &#x3D;&#x3D; B</td>
<td>A &#x3D;&#x3D; ToNumber(B)</td>
<td>A &#x3D;&#x3D; ToNumber(B)</td>
<td>A &#x3D;&#x3D; ToPrimitive(B)</td>
<td></td>
</tr>
<tr>
<td>String</td>
<td>ToNumber(A) &#x3D;&#x3D; B</td>
<td>A &#x3D;&#x3D; B</td>
<td>ToNumber(A) &#x3D;&#x3D; ToNumber(B)</td>
<td>ToPrimitive(B) &#x3D;&#x3D; A</td>
<td></td>
</tr>
<tr>
<td>Boolean</td>
<td>ToNumber(A) &#x3D;&#x3D; B</td>
<td>ToNumber(A) &#x3D;&#x3D; ToNumber(B)</td>
<td>ToNumber(A) &#x3D;&#x3D; ToNumber(B)</td>
<td>ToNumber(A) &#x3D;&#x3D; ToPrimitive(B)</td>
<td></td>
</tr>
<tr>
<td>Object</td>
<td>ToPrimitive(A) &#x3D;&#x3D; B</td>
<td>ToPrimitive(A) &#x3D;&#x3D; B</td>
<td>ToPrimitive(A) &#x3D;&#x3D; ToPrimitive(B)</td>
<td>A &#x3D;&#x3D;&#x3D; B</td>
<td></td>
</tr>
</tbody></table>
<p>在上面的表格中，<code>ToNumber(A)</code> 尝试在比较前将参数 <code>A</code> 转换为数字。<code>ToPrimitive(A)</code> 将参数 <code>A</code> 转换为原始值( <code>Primitive</code> )。</p>
<p><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/images/transfer.png"><img src="https://github.com/zcxiaobao/everyday-insist/raw/master/21interview/images/transfer.png"></a></p>
<h2 id="instanceof原理，模拟实现"><a href="#instanceof原理，模拟实现" class="headerlink" title="instanceof原理，模拟实现"></a>instanceof原理，模拟实现</h2><p>什么是instanceof？你能模拟实现一个instanceof吗？</p>
<ol>
<li><code>instanceof</code> 判断对象的原型链上是否存在构造函数的原型。只能判断引用类型。</li>
<li><code>instanceof</code> 常用来判断 <code>A</code> 是否为 <code>B</code> 的实例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A是B的实例，返回true，否则返回false</span></span><br><span class="line"><span class="comment">// 判断A的原型链上是否有B的原型</span></span><br><span class="line">A instaceof B</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>模拟实现 <code>instanceof</code></li>
</ol>
<p>思想：沿原型链往上查找</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instance_of</span>(<span class="params">Case, Constructor</span>) &#123;</span><br><span class="line">    <span class="comment">// 基本数据类型返回false</span></span><br><span class="line">    <span class="comment">// 兼容一下函数对象</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="title function_">typeof</span>(<span class="title class_">Case</span>) != <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title function_">typeof</span>(<span class="title class_">Case</span>) != <span class="string">&#x27;function&#x27;</span>) || <span class="title class_">Case</span> == <span class="string">&#x27;null&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CaseProto</span> = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Case</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 查到原型链顶端，仍未查到，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">CaseProto</span> == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 找到相同的原型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">CaseProto</span> === <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="title class_">CaseProto</span> = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">CaseProto</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="“1”-”2”-”3”-map-parseInt-的输出结果是多少"><a href="#“1”-”2”-”3”-map-parseInt-的输出结果是多少" class="headerlink" title="[“1”,”2”,”3”].map(parseInt)的输出结果是多少?"></a>[“1”,”2”,”3”].map(parseInt)的输出结果是多少?</h2><p>这个网红题考察的就是 <code>parseInt</code> 有两个参数。 <code>map</code> 传入的函数可执行三个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ele   遍历的元素</span></span><br><span class="line"><span class="comment">// index 遍历的元素索引</span></span><br><span class="line"><span class="comment">// arr   数组</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">ele, index, arr</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>[‘1’,’2’,’3’].map(parseInt)相当于执行了以下三次过程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>, [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>, [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>, [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li><code>parseInt(&#39;1&#39;, 0, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])</code>: radix为0时，默认取10，最后返回1</li>
<li><code>parseInt(&#39;2&#39;, 1, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])</code>: radix取值为2~36，返回NaN</li>
<li><code>parseInt(&#39;3&#39;, 2, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])</code>: radix取值为2，二进制只包括0，1，返回NaN</li>
</ul>
<h3 id="如何让上述代码返回-1-2-3-，使用你能想到的最简单的方案-要求使用-map"><a href="#如何让上述代码返回-1-2-3-，使用你能想到的最简单的方案-要求使用-map" class="headerlink" title="如何让上述代码返回[1,2,3]，使用你能想到的最简单的方案(要求使用[].map())"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/parseInt.md#%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%8A%E8%BF%B0%E4%BB%A3%E7%A0%81%E8%BF%94%E5%9B%9E123%E4%BD%BF%E7%94%A8%E4%BD%A0%E8%83%BD%E6%83%B3%E5%88%B0%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%A1%88%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8map"></a>如何让上述代码返回[1,2,3]，使用你能想到的最简单的方案(要求使用[].map())</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>].<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br></pre></td></tr></table></figure>

<h2 id="typeof-与-instanceof-的区别"><a href="#typeof-与-instanceof-的区别" class="headerlink" title="typeof 与 instanceof 的区别"></a>typeof 与 instanceof 的区别</h2><p>typeof与instanceof都是判断数据类型的方法，区别如下：</p>
<ol>
<li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li>
<li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>
<li>而 typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了 function 类型以外，其他的也无法判断</li>
</ol>
<blockquote>
<p>通用检测数据类型，可以采用Object.prototype.toString，调用该方法，统一返回格式“[object Xxx]” 的字符串</p>
</blockquote>
<h2 id="怎么判断数组"><a href="#怎么判断数组" class="headerlink" title="怎么判断数组"></a>怎么判断数组</h2><ol>
<li><code>ES6</code> 提供的新方法 <code>Array.isArray()</code></li>
<li>如果不存在<code>Array.isArray()</code>呢？可以借助<code>Object.prototype.toString.call()</code> 进行判断，此方式兼容性最好</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">typeof</span>(o) === <span class="string">&#x27;object&#x27;</span>                &amp;&amp; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>instanceof</code> 判断</li>
</ol>
<p>判断方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果为true，则arr为数组</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br></pre></td></tr></table></figure>

<p><code>instanceof</code> 判断数组类型如此之简单，为何不推荐使用那？</p>
<p><code>instanceof</code> 操作符的问题在于，如果网页中存在多个 <code>iframe</code> ，那便会存在多个 <code>Array</code> 构造函数，此时判断是否是数组会存在问题。</p>
<p>更详细的内容可以参考博文：<a href="https://blog.csdn.net/weixin_42467709/article/details/105302852">JavaScript为啥不用instanceof检测数组</a></p>
<h2 id="number能表示的整数的最大范围"><a href="#number能表示的整数的最大范围" class="headerlink" title="number能表示的整数的最大范围"></a>number能表示的整数的最大范围</h2><ol>
<li><p>安全的整数范围：15位数以下</p>
</li>
<li><p>JavaScript 并不能表示任意位的整数，最大的整数是Number.MAX_SAFE_INTEGER（9007199254740991），最小的整数是Number.MIN_SAFE_INTEGER（-9007199254740991）</p>
</li>
<li><p>特别注意，很多ID是超出这个范围的，所以ID最好是用字符串，当ID超出<strong>15</strong>位数的话，就肯定要用字符串类型了。</p>
</li>
<li><p>超出会失准</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">9007199254740995</span></span><br><span class="line">a; <span class="comment">// 9007199254740996</span></span><br></pre></td></tr></table></figure>

<h2 id="2-toFixed-会输出什么结果"><a href="#2-toFixed-会输出什么结果" class="headerlink" title="2.toFixed() 会输出什么结果"></a>2.toFixed() 会输出什么结果</h2><p>会报错 <code>Uncaught SyntaxError: Invalid or unexpected token</code>，<code>.</code> 会被看做小数点，正确调用方式 <code>(2).toFixed()</code></p>
<h2 id="查询某个对象是否有某个属性的方法"><a href="#查询某个对象是否有某个属性的方法" class="headerlink" title="查询某个对象是否有某个属性的方法"></a>查询某个对象是否有某个属性的方法</h2><h3 id="使用in关键字"><a href="#使用in关键字" class="headerlink" title="使用in关键字"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/testifyObjProp.md#%E4%BD%BF%E7%94%A8in%E5%85%B3%E9%94%AE%E5%AD%97"></a>使用in关键字</h3><p>该方法可以判断对象的自有属性和继承来的属性是否存在。</p>
<h3 id="使用对象的hasOwnProperty-方法"><a href="#使用对象的hasOwnProperty-方法" class="headerlink" title="使用对象的hasOwnProperty()方法"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/testifyObjProp.md#%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84hasownproperty%E6%96%B9%E6%B3%95"></a>使用对象的hasOwnProperty()方法</h3><p>该方法只能判断自有属性是否存在，对于继承属性会返回false。</p>
<h3 id="使用undefined判断"><a href="#使用undefined判断" class="headerlink" title="使用undefined判断"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/testifyObjProp.md#%E4%BD%BF%E7%94%A8undefined%E5%88%A4%E6%96%AD"></a>使用undefined判断</h3><p>自有属性和继承属性均可判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line">o.<span class="property">x</span>!==<span class="literal">undefined</span>;    <span class="comment">//true</span></span><br><span class="line">o.<span class="property">y</span>!==<span class="literal">undefined</span>;    <span class="comment">//false</span></span><br><span class="line">o.<span class="property">toString</span>!==<span class="literal">undefined</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法存在一个问题，如果属性的值就是undefined的话，该方法不能返回想要的结果，如下:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">x</span>:<span class="literal">undefined</span>&#125;;</span><br><span class="line">o.<span class="property">x</span>!==<span class="literal">undefined</span>;    <span class="comment">//false，属性存在，但值是undefined</span></span><br><span class="line">o.<span class="property">y</span>!==<span class="literal">undefined</span>;    <span class="comment">//false</span></span><br><span class="line">o.<span class="property">toString</span>!==<span class="literal">undefined</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="在条件语句中判断"><a href="#在条件语句中判断" class="headerlink" title="在条件语句中判断"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/testifyObjProp.md#%E5%9C%A8%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%88%A4%E6%96%AD"></a>在条件语句中判断</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(o.<span class="property">x</span>) o.<span class="property">x</span>+=<span class="number">1</span>; <span class="comment">//如果x是undefine,null,false,&quot; &quot;,0或NaN,它将保持不变</span></span><br></pre></td></tr></table></figure>

<h3 id="propertyIsEnumerable-NaN"><a href="#propertyIsEnumerable-NaN" class="headerlink" title="propertyIsEnumerable()"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/testifyObjProp.md#propertyisenumerable"></a>propertyIsEnumerable()</h3><p>propertyIsEnumerable() 是hasOwnProperty() 的增强版，这个方法的用法与hasOwnProperty()相同，但当检测属性是自有属性(非继承)且这个属性是可枚举的，才会返回true。</p>
<h2 id="splice和slice你能说说有啥用和区别吗"><a href="#splice和slice你能说说有啥用和区别吗" class="headerlink" title="splice和slice你能说说有啥用和区别吗"></a>splice和slice你能说说有啥用和区别吗</h2><h3 id="slice：截取功能"><a href="#slice：截取功能" class="headerlink" title="slice：截取功能"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/spliceSlice.md#slice%E6%88%AA%E5%8F%96%E5%8A%9F%E8%83%BD"></a>slice：截取功能</h3><ul>
<li>截取数组为主，也可以截取字符串</li>
<li>返回新的数组，包含截取的元素</li>
<li>不改变原数组</li>
</ul>
<h3 id="splice-：数组增删查改"><a href="#splice-：数组增删查改" class="headerlink" title="splice()：数组增删查改"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/spliceSlice.md#splice%E6%95%B0%E7%BB%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9"></a>splice()：数组增删查改</h3><ul>
<li>只能对数组增删查改，字符串无效</li>
<li>返回新的数组，内容是被删除的元素</li>
<li>会改变原数组</li>
</ul>
<h2 id="x3D-x3D-和-x3D-x3D-x3D-区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-区别" class="headerlink" title="&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别"></a>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别</h2><ul>
<li>&#x3D;&#x3D;&#x3D; 是严格相等，要求数据类型和值都要相等；&#x3D;&#x3D; 只需要值相等。</li>
<li>&#x3D;&#x3D; 会发生隐式类型转换，&#x3D;&#x3D;&#x3D; 不会发生隐式类型转换。</li>
</ul>
<h3 id="JS中构造函数与普通函数的区别在于："><a href="#JS中构造函数与普通函数的区别在于：" class="headerlink" title="JS中构造函数与普通函数的区别在于："></a>JS中构造函数与普通函数的区别在于：</h3><h5 id="1、调用方式不一样"><a href="#1、调用方式不一样" class="headerlink" title="1、调用方式不一样"></a>1、调用方式不一样</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数也是一个普通函数，创建方式和普通函数一样。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Foo</span>();<span class="comment">//普通函数调用方式</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>();<span class="comment">//构造函数调用方式</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<ul>
<li>普通函数调用方式：直接调用person();</li>
<li>构造函数调用方式：需要使用new关键字来调用 new person();</li>
</ul>
<h5 id="2、作用也不一样（构造函数用来新建实例对象）"><a href="#2、作用也不一样（构造函数用来新建实例对象）" class="headerlink" title="2、作用也不一样（构造函数用来新建实例对象）"></a>2、作用也不一样（构造函数用来新建实例对象）</h5><h5 id="3、首字母大小写习惯"><a href="#3、首字母大小写习惯" class="headerlink" title="3、首字母大小写习惯"></a>3、首字母大小写习惯</h5><ul>
<li>一般构造函数的函数名称会用大写</li>
<li>普通函数用小写</li>
</ul>
<h5 id="4、函数中this的指向不同"><a href="#4、函数中this的指向不同" class="headerlink" title="4、函数中this的指向不同"></a>4、函数中this的指向不同</h5><ul>
<li>普通函数中的this，在严格模式下指向undefined，非严格模式下指向window对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">//代码运行结果：true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数的this则是指向它创建的对象实例。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;令狐冲&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="property">name</span>);</span><br><span class="line"><span class="comment">//代码运行结果：令狐冲</span></span><br><span class="line"><span class="comment">//补充：构造函数的函数名和类名相同：Foo()这个构造函数，Foo是函数名，也是这个对象的类名。</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h5 id="5、写法的不同"><a href="#5、写法的不同" class="headerlink" title="5、写法的不同"></a>5、写法的不同</h5><p><strong>构造函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>);<span class="comment">//使用new关键字，不使用return</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>普通函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name;</span><br><span class="line">    <span class="keyword">return</span> obj;<span class="comment">//使用return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">person</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;<span class="comment">//使用return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">person</span>(<span class="string">&#x27;john&#x27;</span>),</span><br></pre></td></tr></table></figure>

<h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p>所谓类数组对象，就是指可以通过索引属性访问元素并且拥有 <code>length</code> 属性的对象。</p>
<h2 id="类数组与数组区别"><a href="#类数组与数组区别" class="headerlink" title="类数组与数组区别"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/arrayLike.md#%E7%B1%BB%E6%95%B0%E7%BB%84%E4%B8%8E%E6%95%B0%E7%BB%84%E5%8C%BA%E5%88%AB"></a>类数组与数组区别</h2><ol>
<li>类数组不具备数组的方法(splice，split，push..)</li>
<li>类数组是一个普通对象，数组类型是Array</li>
</ol>
<h2 id="为什么设置类数组"><a href="#为什么设置类数组" class="headerlink" title="为什么设置类数组"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/baseJS/arrayLike.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%BE%E7%BD%AE%E7%B1%BB%E6%95%B0%E7%BB%84"></a>为什么设置类数组</h2><p>类数组对象的设计目的更多是只让你<strong>遍历和访问下标</strong>,而不是去添加或删除元素</p>
<h2 id="null-与-undefined-的区别"><a href="#null-与-undefined-的区别" class="headerlink" title="null 与 undefined 的区别"></a>null 与 undefined 的区别</h2><ul>
<li>null表示一个”无”的对象，也就是该处不应该有值；而undefined表示未定义。</li>
<li>在转换为数字时结果不同，Number(null)为0，而undefined为NaN。</li>
</ul>
<h3 id="使用场景上："><a href="#使用场景上：" class="headerlink" title="使用场景上："></a>使用场景上：</h3><ol>
<li><p>null：</p>
<ul>
<li>作为函数的参数，表示该函数的参数不是对象</li>
<li>作为对象原型链的终点</li>
</ul>
</li>
<li><p>undefined:</p>
<ul>
<li>变量声明未赋值，等于undefined</li>
<li>调用函数时，未提供参数值，该参数等于undefined</li>
<li>对象没有赋值属性，该属性的值为undefined</li>
<li>函数没有返回值时，默认返回undefined</li>
</ul>
</li>
</ol>
<h3 id="forEach与for循环，谁的性能更好"><a href="#forEach与for循环，谁的性能更好" class="headerlink" title="forEach与for循环，谁的性能更好"></a>forEach与for循环，谁的性能更好</h3><hr>
<h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ul>
<li>默认绑定: 非严格模式下 this 指向全局对象，严格模式下 this 会绑定为 undefined</li>
<li>隐式绑定: 满足 XXX.fn() 格式，fn 的 this 指向 XXX。如果存在链式调用， this 永远指向最后调用它的那个对象 隐式绑定丢失：起函数别名，通过别名运行；函数作为参数会造成隐式绑定丢失。</li>
<li>显式绑定: 通过 call&#x2F;apply&#x2F;bind 修改 this 指向</li>
<li>new绑定: 通过 new 来调用构造函数，会生成一个新对象，并且把这个新对象绑定为调用函数的 this 。</li>
<li>箭头函数绑定: 箭头函数没有 this ，它的 this 是通过作用域链查到外层作用域的 this ，且指向函数定义时的 this 而非执行时</li>
<li>优先级</li>
</ul>
<h2 id="什么是原型与原型链"><a href="#什么是原型与原型链" class="headerlink" title="什么是原型与原型链"></a>什么是原型与原型链</h2><h3 id="原型链图"><a href="#原型链图" class="headerlink" title="原型链图"></a>原型链图</h3><p><a href="https://camo.githubusercontent.com/b40139a51d926fd28fe7734c0b3beab5e75df84d6c916e5631f09bca43e74e17/68747470733a2f2f70392d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65616663656530306463323134343563623961393331356665653537636239317e74706c762d6b3375316662706663702d77617465726d61726b2e61776562703f"><img src="https://camo.githubusercontent.com/b40139a51d926fd28fe7734c0b3beab5e75df84d6c916e5631f09bca43e74e17/68747470733a2f2f70392d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65616663656530306463323134343563623961393331356665653537636239317e74706c762d6b3375316662706663702d77617465726d61726b2e61776562703f"></a></p>
<p>参考链接: <a href="https://juejin.cn/post/7018355953955241997">JavaScript之彻底理解原型与原型链</a></p>
<h2 id="你能讲一下事件循环机制吗？"><a href="#你能讲一下事件循环机制吗？" class="headerlink" title="你能讲一下事件循环机制吗？"></a>你能讲一下事件循环机制吗？</h2><ol>
<li><p>代码开始执行，创建一个全局调用栈，script作为宏任务执行</p>
</li>
<li><p>执行过程过同步任务立即执行，异步任务根据异步任务类型分别注册到微任务队列和宏任务队列</p>
</li>
<li><p>同步任务执行完毕，查看微任务队列</p>
<ul>
<li>若存在微任务，将微任务队列全部执行(包括执行微任务过程中产生的新微任务)</li>
<li>若无微任务，查看宏任务队列，执行第一个宏任务，宏任务执行完毕，查看微任务队列，重复上述操作，直至宏任务队列为空</li>
</ul>
</li>
</ol>
<p>参考链接 <a href="https://juejin.cn/post/7020328988715270157">JavaScript之彻底理解EventLoop</a></p>
<h3 id="javascript的宏任务和微任务"><a href="#javascript的宏任务和微任务" class="headerlink" title="javascript的宏任务和微任务"></a>javascript的宏任务和微任务</h3><p>宏任务有Event Table、Event Queue，微任务有Event Queue</p>
<ol>
<li><p>宏任务：包括整体代码script，setTimeout，setInterval、I&#x2F;O、UI 交互事件、setImmediate(Node.js 环境)；</p>
</li>
<li><p>微任务：Promise、MutaionObserver、process.nextTick(Node.js 环境)</p>
</li>
</ol>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>在学习<code>JavaScript</code>预编译之前，先了解一下<code>JavaScript</code>从编译到执行的过程，大致可分为四步：</p>
<ol>
<li>词法分析</li>
<li>语法分析：检查代码是否存在错误，若有错误，引擎会抛出语法错误。同时会构建一颗抽象语法树(<code>AST</code>)。</li>
<li>预编译</li>
<li>解释执行</li>
</ol>
<h2 id="预编译-1"><a href="#预编译-1" class="headerlink" title="预编译"></a>预编译</h2><blockquote>
<p><code>JavaScript</code>是解释性语言，也就是说，编译一行，执行一行，但<code>js</code>并非上来就进入编译环节，它在编译之前存在预编译过程。</p>
</blockquote>
<p><code>js</code>中预编译一般有两种：全局的预编译和函数的预编译，分别发生在<code>script</code>内代码执行前和函数的执行前。</p>
<h2 id="函数预编译"><a href="#函数预编译" class="headerlink" title="函数预编译"></a>函数预编译</h2><p>首先来看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);           <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);           <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);           <span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);           <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>就以上述例子中的<code>a</code>为例，有形参<code>a</code>，变量<code>a</code>，函数<code>a</code>，那<code>test</code>函数执行时，此时的<code>a</code>到底是什么呢？</p>
<p>输出结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">ƒ () &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>要想弄明白最终的输出结果，就不得不好好学习一下预编译的详细过程。</p>
<p>在预编译学习中，经常听到一句话：<strong>函数声明整体提升，变量声明提升</strong>。</p>
<p>这句话可以解决大多数场景下的预编译面试题，但光凭这句话无法吃透预编译的，因此接下来我们来一起捋一下函数预编译的详细流程。</p>
<h3 id="函数预编译四部曲"><a href="#函数预编译四部曲" class="headerlink" title="函数预编译四部曲"></a>函数预编译四部曲</h3><ol>
<li>预编译开始，会建立<code>AO(Activation Object)</code>对象</li>
<li>找形参和变量声明，使其作为<code>AO</code>的属性名，值赋予<code>undefined</code></li>
<li>实参和形参相统一(将实参值赋值给形参)</li>
<li>找函数声明，函数名作为<code>AO</code>属性名，值赋予函数体</li>
</ol>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>学习了函数的预编译过程，就可以回头细细的品味一下上面的案例：</p>
<ol>
<li><p>先建立<code>AO</code>，并找形参和变量声明，值赋予<code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> :&#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">   <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>形参实参相统一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> :&#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找函数声明，值赋予函数体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> :&#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">   <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">   <span class="attr">d</span>: <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预编译过程结束，挨着分析一下<code>console</code>的打印结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">第一个<span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 此时AO中a的值为function a() &#123;&#125; </span></span><br><span class="line">执行赋值操作：</span><br><span class="line">   a = <span class="number">123</span> <span class="comment">// AO中的a值修改为123</span></span><br><span class="line">   第二个<span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 123</span></span><br><span class="line">   第三个<span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 123</span></span><br><span class="line">   b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// AO中的b值修改为function b()&#123;&#125;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// function b()&#123;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="全局预编译"><a href="#全局预编译" class="headerlink" title="全局预编译"></a>全局预编译</h2><p>全局中不存在形参和实参，所以全局预编译只需处理变量声明和函数声明。</p>
<h3 id="全局预编译三部曲"><a href="#全局预编译三部曲" class="headerlink" title="全局预编译三部曲"></a>全局预编译三部曲</h3><ol>
<li>生成<code>GO(Global Object)</code></li>
<li>找变量声明，由于全局变量默认挂载在<code>window</code>之上，若<code>window</code>当前已存在当前属性，忽略当前操作，若没有，变量作为属性名，值赋予<code>undefined</code>。</li>
<li>找函数声明，函数与变量类似，先去<code>window</code>上查看，不存在，函数作为函数名，值为函数体</li>
</ol>
<h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><p>将函数预编译案例稍微修改，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test部分的结果与函数部分相同，再次只分析全局部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>生成<code>GO</code>，变量提升，函数提升，得到<code>GO</code>如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GO</span>/<span class="attr">window</span>: &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">   <span class="attr">test</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>因此第一个<code>a</code>的值为<code>undefined</code>，随后<code>a</code>赋值为<code>1</code>，所以第二个<code>a</code>的值为<code>1</code></p>
</li>
</ol>
<blockquote>
<p>test中定义了变量a，因此打印的a为自身AO中的值。如果test中没有定义a，就会沿着作用域链，当GO中查找a。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>1. 当函数中出现同样名称的函数名和变量名，编译器真的会先做变量提升再去函数提升吗？这个问题暂时无法验证，如果有大佬知道，希望可以评论告诉一下，谢谢</strong></p>
<p><strong>2. let&#x2F;const声明的变量应当同样进行了变量提升，只不过它与var声明的变量做了一定的区分</strong></p>
<h2 id="常见面试题分析"><a href="#常见面试题分析" class="headerlink" title="常见面试题分析"></a>常见面试题分析</h2><h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">c = <span class="number">234</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>生成<code>GO</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">GO</span>: &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">   <span class="attr">test</span>: <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">   <span class="attr">c</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JavaScript中变量如果未经声明就赋值，会默认将变量挂载到window对象上，这也就是所谓的<code>imply global</code>。<code>c</code>就是<code>imply global</code>。</p>
</blockquote>
</li>
<li><p><code>test</code>执行，生成<code>test</code>的<code>AO</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AO还会存储[[scope]]属性，存储AO的作用域链</span></span><br><span class="line"></span><br><span class="line"><span class="attr">AO</span>: &#123;</span><br><span class="line">   <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">   [[scope]]: [<span class="title class_">TestAO</span>, <span class="variable constant_">GO</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有同学会问，<code>if(a)</code>为false，if内部不会执行，那test的AO中为什么还会有b啊？预编译并不是执行，它只不过把变量、函数等进行提升，只有在执行时，才会设计代码逻辑的判断。</p>
</blockquote>
</li>
<li><p>分析<code>test</code>函数执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// AO中b为undefined</span></span><br><span class="line"><span class="keyword">if</span> (a) <span class="comment">// AO中无a，沿[[scope]]找到GO中的a，值为undefined</span></span><br><span class="line">b = <span class="number">100</span>; <span class="comment">// 不执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// undefined</span></span><br><span class="line">c = <span class="number">234</span>; <span class="comment">// AO中没有c属性，沿[[scope]]找到GO中的c修改为234</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 打印的是GO中的c，234</span></span><br><span class="line"><span class="comment">// test执行完毕，AO销毁</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分析剩余代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>; <span class="comment">// GO中的a修改为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// GO中c值为234，234</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);      <span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);      a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">b</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br></pre></td></tr></table></figure>

<p><strong>return; 与上面案例的if一样，预编译环节不会处理</strong></p>
<h4 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); </span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)  </span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); </span><br><span class="line"><span class="title function_">foo</span>(); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)  </span><br><span class="line"><span class="title function_">foo</span>(); </span><br></pre></td></tr></table></figure>

<h4 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">A</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">B</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">B</span><br></pre></td></tr></table></figure>

<h3 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a1 = a;</span><br><span class="line">    <span class="keyword">var</span> a = foo;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);     &#125;</span><br><span class="line">    <span class="title function_">a1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h4><p><code>1</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>预编译的题目多数情况下就可以采用以下原则：</p>
<ul>
<li>函数声明，<strong>整体</strong>提升</li>
<li>变量声明，<strong>声明</strong>提升</li>
</ul>
<p>如果遇到复杂的情况，就要按照全局预编译的三部曲和函数预编译的四部曲一步一步推导。</p>
<p><strong>最后，在预编译时一定要注意</strong>：<code>return、if</code>等代码逻辑判断是在执行时候做的，预编译不管这些，预编译只管变量、形参、函数等。</p>
<h2 id="new-操作符做了哪些事情"><a href="#new-操作符做了哪些事情" class="headerlink" title="new 操作符做了哪些事情"></a>new 操作符做了哪些事情</h2><p>MDN 中对 new 的描述: 使用 new 来构建函数，会执行如下四部操作：</p>
<ul>
<li>创建一个空的简单 JavaScript 对象（即 {} ）；</li>
<li>为步骤1新创建的对象添加属性 <strong>proto</strong> ，将该属性链接至构造函数的原型对象 ；</li>
<li>将步骤1新创建的对象作为 this 的上下文 ；</li>
<li>如果该函数没有返回对象，则返回 this 。</li>
</ul>
<h3 id="「硬核JS」你真的了解垃圾回收机制吗-掘金-juejin-cn"><a href="#「硬核JS」你真的了解垃圾回收机制吗-掘金-juejin-cn" class="headerlink" title="「硬核JS」你真的了解垃圾回收机制吗 - 掘金 (juejin.cn)"></a><a href="https://juejin.cn/post/6981588276356317214">「硬核JS」你真的了解垃圾回收机制吗 - 掘金 (juejin.cn)</a></h3><p><a href="https://juejin.cn/post/6844903477819211784">JavaScript深入之继承的多种方式和优缺点 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/6854573210063929352">JS原型链继承与Class继承 - 掘金 (juejin.cn)</a></p>
<h2 id="call、apply、bind区别"><a href="#call、apply、bind区别" class="headerlink" title="call、apply、bind区别"></a>call、apply、bind区别</h2><ol>
<li>call() 和apply()的第一个参数相同，就是指定的对象。这个对象就是该函数的执行上下文。</li>
<li>call()和apply()的区别就在于，两者之间的参数。</li>
<li>call()在第一个参数之后的 后续所有参数就是传入该函数的值。</li>
<li>apply() 只有两个参数，第一个是对象，第二个是数组，这个数组就是该函数的参数。</li>
<li>bind() 方法和前两者不同在于： bind() 方法会返回执行上下文被改变的函数而不会立即执行，而前两者是 直接执行该函数。他的参数和call()相同。</li>
</ol>
<h2 id="cookie-localStorage-sessionStorage区别"><a href="#cookie-localStorage-sessionStorage区别" class="headerlink" title="cookie, localStorage sessionStorage区别"></a>cookie, localStorage sessionStorage区别</h2><table>
<thead>
<tr>
<th>特性</th>
<th>cookie</th>
<th>localStorage</th>
<th>sessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>生命周期</td>
<td>可设置失效时间，没有设置的话，默认是关闭浏览器后失效</td>
<td>除非被清除，否则永久保存</td>
<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
</tr>
<tr>
<td>存放数据大小</td>
<td>4K左右</td>
<td>一般为5MB</td>
<td>一般为5MB</td>
</tr>
<tr>
<td>http请求</td>
<td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
<tr>
<td>易用性</td>
<td>需要程序员自己封装，源生的Cookie接口不友好</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
</tr>
</tbody></table>
<p><a href="https://juejin.cn/post/7024305368595431454">半小时，阿包带你学会手撕高阶函数 - 掘金 (juejin.cn)</a></p>
<h2 id="防抖与节流的区别"><a href="#防抖与节流的区别" class="headerlink" title="防抖与节流的区别"></a>防抖与节流的区别</h2><ul>
<li><p>防抖 (debounce): 将多次高频操作优化为只在最后一次执行，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。</p>
</li>
<li><p>节流(throttle): 每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 resize 事件，通常每隔 100~500 ms执行一次即可。</p>
</li>
</ul>
<h2 id="同步任务与异步任务区别"><a href="#同步任务与异步任务区别" class="headerlink" title="同步任务与异步任务区别"></a>同步任务与异步任务区别</h2><h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p>同步运行，同步任务是存储在栈上的，每次会同步清楚每个同步任务，一次只能运行一个任务，函数调用后需等到函数执行结束，返回执行的结果，才能进行下一个任务，这样就会导致线程阻塞。</p>
<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>异步模式，即与同步模式相反，异步任务是以队列的形式来储存的，可以一起执行多个任务，函数调用后不会立即返回执行的结果，如果前一个人物需要等待，可先执行后面的任务，等到前置任务结果返回后再继续回调 例：</p>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>天气冷了，早上刚醒来想喝点热水暖暖身子，但这每天起早贪黑996，晚上回来太累躺下就睡，没开水啊，没法子，只好急急忙忙去烧水。 现在早上太冷了啊，不由得在被窝里面多躺了一会，收拾的时间紧紧巴巴，不能空等水开，于是我便趁此去洗漱，收拾自己。 洗漱完，水开了，喝到暖暖的热水，舒服啊！ 舒服完，开启新的996之日，打工人出发！ 烧水和洗漱是在同时间进行的，这就是<strong>计算机中的异步</strong>。 <strong>计算机中的同步</strong>是连续性的动作，上一步未完成前，下一步会发生堵塞，直至上一步完成后，下一步才可以继续执行。例如：只有等水开，才能喝到暖暖的热水。</p>
<h2 id="构造函数，实例对象和原型对象关系"><a href="#构造函数，实例对象和原型对象关系" class="headerlink" title="构造函数，实例对象和原型对象关系"></a>构造函数，实例对象和原型对象关系</h2><p><a href="https://camo.githubusercontent.com/dbe218be274f152013400d3784ba99ea75fc10feeeb27f23c4e1d93a91d130f0/68747470733a2f2f70362d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65303139353134373961363634353765396333323665626333613065623134667e74706c762d6b3375316662706663702d77617465726d61726b2e61776562703f"><img src="https://camo.githubusercontent.com/dbe218be274f152013400d3784ba99ea75fc10feeeb27f23c4e1d93a91d130f0/68747470733a2f2f70362d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65303139353134373961363634353765396333323665626333613065623134667e74706c762d6b3375316662706663702d77617465726d61726b2e61776562703f"></a></p>
<ul>
<li><code>add.prototype.constructor --&gt; add</code></li>
<li><code>add1.__proto__ -&gt; add.prototype</code></li>
</ul>
<h2 id="构造函数，实例对象和原型对象是怎么挂载的"><a href="#构造函数，实例对象和原型对象是怎么挂载的" class="headerlink" title="构造函数，实例对象和原型对象是怎么挂载的"></a>构造函数，实例对象和原型对象是怎么挂载的</h2><h3 id="实例对象与原型对象的关系挂载发生在-new-过程"><a href="#实例对象与原型对象的关系挂载发生在-new-过程" class="headerlink" title="实例对象与原型对象的关系挂载发生在 new 过程"></a>实例对象与原型对象的关系挂载发生在 new 过程</h3><ul>
<li><p>MDN 中对 new 的描述: 使用 new 来构建函数，会执行如下四部操作：</p>
<ol>
<li>创建一个空的简单 JavaScript 对象（即 {} ）；</li>
<li>为步骤1新创建的对象添加属性 <strong>proto</strong> ，将该属性链接至构造函数的原型对象 ；</li>
<li>将步骤1新创建的对象作为 this 的上下文 ；</li>
<li>如果该函数没有返回对象，则返回 this 。</li>
</ol>
</li>
</ul>
<h3 id="构造函数与原型对象通过-constructor-属性联系起来"><a href="#构造函数与原型对象通过-constructor-属性联系起来" class="headerlink" title="构造函数与原型对象通过 constructor 属性联系起来"></a>构造函数与原型对象通过 constructor 属性联系起来</h3><p><code>Func.prototype.constructor --&gt; Func</code></p>
<h2 id="map与weakMap的区别"><a href="#map与weakMap的区别" class="headerlink" title="map与weakMap的区别"></a>map与weakMap的区别</h2><p>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。</p>
<ul>
<li>只接受对象作为键名（null 除外），不接受其他类型的值作为键名</li>
<li>键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的</li>
<li>不能遍历，方法有 get、set、has、delete</li>
</ul>
<h2 id="set-与-weakSet-区别"><a href="#set-与-weakSet-区别" class="headerlink" title="set 与 weakSet 区别"></a>set 与 weakSet 区别</h2><p><code>WeakSet</code> 结构与 Set 类似，也是不重复的值的集合。</p>
<ol>
<li><code>WeakSet</code> 成员都是数组和类似数组的对象，若调用 <code>add()</code> 方法时传入了非数组和类似数组的对象的参数，就会抛出错误。</li>
<li><code>WeakSet</code> 成员都是弱引用，可以被垃圾回收机制回收，可以用来保存 <code>DOM</code> 节点，不容易造成内存泄漏。</li>
<li><code>WeakSet</code> 不可迭代，因此不能被用在 <code>for-of</code> 等循环中。</li>
<li><code>WeakSet</code> 没有 <code>size</code> 属性。</li>
</ol>
<p><a href="https://juejin.cn/post/6844903855302377486">彻底弄懂ES6中的Map和Set - 掘金 (juejin.cn)</a></p>
<h2 id="map与object区别"><a href="#map与object区别" class="headerlink" title="map与object区别"></a>map与object区别</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li>map 只能通过 new 关键字和构造函数创建</li>
<li>object 可以使用字面量、构造函数、Object.crate的形式创建。</li>
</ol>
<h3 id="键值"><a href="#键值" class="headerlink" title="键值"></a>键值</h3><ol>
<li>object键值只能使用数组、字符串、符号作为键</li>
<li>map 的键值可以是任意类型</li>
</ol>
<h3 id="顺序与迭代"><a href="#顺序与迭代" class="headerlink" title="顺序与迭代"></a>顺序与迭代</h3><ol>
<li>object的键值 key 的遍历顺序<ul>
<li><ol>
<li>首先遍历所有数值键，按照数值升序排列。</li>
</ol>
</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li>
</ul>
</li>
<li>map 会维护键值对的插入顺序，因此遍历顺序就是插入顺序</li>
</ol>
<p><a href="https://juejin.cn/post/6945319439772434469#heading-15">从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节 - 掘金 (juejin.cn)</a></p>
<h2 id="如何实现数组去重"><a href="#如何实现数组去重" class="headerlink" title="如何实现数组去重"></a>如何实现数组去重</h2><h4 id="使用双重-for-和-splice"><a href="#使用双重-for-和-splice" class="headerlink" title="使用双重 for 和 splice"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#%E4%BD%BF%E7%94%A8%E5%8F%8C%E9%87%8D-for-%E5%92%8C-splice"></a>使用双重 <code>for</code> 和 <code>splice</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[j])&#123;                     <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 删除后注意回调j</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-indexOf-或-includes-加新数组"><a href="#使用-indexOf-或-includes-加新数组" class="headerlink" title="使用 indexOf 或 includes 加新数组"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#%E4%BD%BF%E7%94%A8-indexof-%E6%88%96-includes-%E5%8A%A0%E6%96%B0%E6%95%B0%E7%BB%84"></a>使用 <code>indexOf</code> 或 <code>includes</code> 加新数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用indexof</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> uniqueArr = []; <span class="comment">// 新数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//indexof返回-1表示在新数组中不存在该元素</span></span><br><span class="line">            uniqueArr.<span class="title function_">push</span>(arr[i])<span class="comment">//是新数组里没有的元素就push入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniqueArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用includes</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> uniqueArr = [];     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">        <span class="keyword">if</span> (!uniqueArr.<span class="title function_">includes</span>(arr[i])) &#123;</span><br><span class="line">            uniqueArr.<span class="title function_">push</span>(arr[i])<span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniqueArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sort-排序后，使用快慢指针的思想"><a href="#sort-排序后，使用快慢指针的思想" class="headerlink" title="sort 排序后，使用快慢指针的思想"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#sort-%E6%8E%92%E5%BA%8F%E5%90%8E%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E7%9A%84%E6%80%9D%E6%83%B3"></a><code>sort</code> 排序后，使用快慢指针的思想</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">var</span> slow = <span class="number">1</span>,</span><br><span class="line">        fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; arr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[fast] != arr[fast - <span class="number">1</span>]) &#123;</span><br><span class="line">            arr[slow ++] = arr[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        ++ fast;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="property">length</span> = slow;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sort</code> 方法用于从小到大排序(返回一个新数组)，其参数中不带以上回调函数就会在两位数及以上时出现排序错误(如果省略，元素按照转换为的字符串的各个字符的 <code>Unicode</code> 位点进行排序。两位数会变为长度为二的字符串来计算)。</p>
<h4 id="ES6-提供的-Set-去重"><a href="#ES6-提供的-Set-去重" class="headerlink" title="ES6 提供的 Set 去重"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#es6-%E6%8F%90%E4%BE%9B%E7%9A%84-set-%E5%8E%BB%E9%87%8D"></a><code>ES6</code> 提供的 <code>Set</code> 去重</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> [...result];</span><br><span class="line">    <span class="comment">//使用扩展运算符将Set数据结构转为数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Set</code> 中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的。</p>
<h4 id="使用哈希表存储元素是否出现-ES6-提供的-map"><a href="#使用哈希表存储元素是否出现-ES6-提供的-map" class="headerlink" title="使用哈希表存储元素是否出现(ES6 提供的 map)"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#%E4%BD%BF%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%98%E5%82%A8%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%87%BA%E7%8E%B0es6-%E6%8F%90%E4%BE%9B%E7%9A%84-map"></a>使用哈希表存储元素是否出现(<code>ES6</code> 提供的 <code>map</code>)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> uniqueArr = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(map.<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">        map.<span class="title function_">set</span>(arr[i], <span class="literal">true</span>);       &#125; <span class="keyword">else</span> &#123;         map.<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">        uniqueArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;     <span class="keyword">return</span> uniqueArr ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>map</code> 对象保存键值对，与对象类似。但 <code>map</code> 的键可以是任意类型，对象的键只能是字符串类型。</p>
<p>如果数组中只有数字也可以使用普通对象作为哈希表。</p>
<h4 id="filter-配合-indexOf"><a href="#filter-配合-indexOf" class="headerlink" title="filter 配合 indexOf"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#filter-%E9%85%8D%E5%90%88-indexof"></a><code>filter</code> 配合 <code>indexOf</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">        <span class="comment">//不是那么就证明是重复项，就舍弃</span></span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有可能存在疑问，我来举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">indexOf</span>(arr[<span class="number">0</span>]) === <span class="number">0</span> <span class="comment">// 1 的第一次出现</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(arr[<span class="number">1</span>]) !== <span class="number">1</span> <span class="comment">// 说明前面曾经出现过1</span></span><br></pre></td></tr></table></figure>

<h4 id="reduce-配合-includes"><a href="#reduce-配合-includes" class="headerlink" title="reduce 配合 includes"></a><a href="https://github.com/zcxiaobao/everyday-insist/blob/master/21interview/imitate/uniqueArr.md#reduce-%E9%85%8D%E5%90%88-includes"></a><code>reduce</code> 配合 <code>includes</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> uniqueArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,cur</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!acc.<span class="title function_">includes</span>(cur))&#123;</span><br><span class="line">            acc.<span class="title function_">push</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;,[]) <span class="comment">// []作为回调函数的第一个参数的初始值</span></span><br><span class="line">    <span class="keyword">return</span> uniqueArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.cn/post/6844904025993773063#heading-14">面试官连环追问：数组拍平（扁平化） flat 方法实现 - 掘金 (juejin.cn)</a></p>
]]></content>
      <tags>
        <tag>前端笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>React18知识点</title>
    <url>/2023/03/22/React18%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="一、Reader-API修改"><a href="#一、Reader-API修改" class="headerlink" title="一、Reader API修改"></a>一、Reader API修改</h2><h3 id="老的写法"><a href="#老的写法" class="headerlink" title="老的写法"></a>老的写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="新的写法"><a href="#新的写法" class="headerlink" title="新的写法"></a>新的写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> root =<span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line"> &lt;<span class="title class_">React</span>.<span class="property">StrictMode</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="二、自动批量更新State"><a href="#二、自动批量更新State" class="headerlink" title="二、自动批量更新State"></a>二、自动批量更新State</h2><blockquote>
<p>React 18 默认开启批处理来实现性能提升</p>
</blockquote>
<p>支持批处理：</p>
<ul>
<li>React事件处理函数</li>
<li>promise   (在react17不支持批量处理)</li>
<li>setTimeout (在react17不支持批量处理)</li>
<li>原生事件处理 (在react17不支持批量处理)</li>
</ul>
<blockquote>
<p>不要开启严格模式测试<br>flushSync可以关掉react18的批量处理</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要分开写在flushSync里</span></span><br><span class="line"> <span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">setName</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">setAge</span>(<span class="number">11</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="三、Concurrent-Mode-并发模式"><a href="#三、Concurrent-Mode-并发模式" class="headerlink" title="三、Concurrent Mode (并发模式)"></a>三、Concurrent Mode (并发模式)</h2><blockquote>
<p>CM本身并不是一个功能，而是一个底层设计，它使得React能够同时准备多个版本的UI。</p>
</blockquote>
<ul>
<li><p>在之前的React状态变更后，会开始准备虚拟DOM,然后渲染真实DOM,整个流程是串联的。一旦开始触发更新，只能等流程结束，期间是无法被中断的。</p>
</li>
<li><p>在并发模式下，React在执行过程中，每执行一个Fiber, 都会检查有没有更高优先级的更新，如果有,则的暂停当前低优先级，待高优先级任务执行完之后,再继续执行或重新执行</p>
</li>
</ul>
<h2 id="四、useTransition"><a href="#四、useTransition" class="headerlink" title="四、useTransition"></a>四、useTransition</h2><blockquote>
<p>React的状态更新可以分为两类：</p>
</blockquote>
<ul>
<li><p>紧急更新（Urgent updates）：比如打字、点击、拖动等，需要立即响应的行为，如果不立即响应会给人很卡的感觉。</p>
</li>
<li><p>过度更新（Transition updates）： 将UI从一个视图过渡到另一个视图。有些延迟，不立即响应是可以接受的。<br><strong>并发模式只是提供了可中断的能力，默认情况下，所有的更新都是紧急更新。</strong></p>
</li>
</ul>
<p>所以它提供了startTransition让我们手动置顶哪些更新是紧急的，哪些是非紧急的。</p>
<h2 id="五、useDeferredValue"><a href="#五、useDeferredValue" class="headerlink" title="五、useDeferredValue"></a>五、useDeferredValue</h2><p>这个方法返回一个延迟响应的值，可以让一个state延迟生效，只是当前没有紧急更新时，该值才会变为最新值，useDefrredValue和statrtTransition一样，都是编辑了一次非紧急任务更新。</p>
<ul>
<li><p>相同：useDeffrredValue本质和useTransition内部实现一样，都是编辑成了延迟更新任务。</p>
</li>
<li><p>不同：useTransition是把更新任务变成延迟更新任务，而useDeferredValue把一个状态变成延迟状态。</p>
</li>
</ul>
<h2 id="六、严格模式"><a href="#六、严格模式" class="headerlink" title="六、严格模式"></a>六、严格模式</h2><p><a href="https://zh-hans.reactjs.org/docs/strict-mode.html#gatsby-focus-wrapper">严格模式 – React (reactjs.org)</a></p>
<h2 id="七、Suspense组件的变化"><a href="#七、Suspense组件的变化" class="headerlink" title="七、Suspense组件的变化"></a>七、Suspense组件的变化</h2><ul>
<li>react18可以省略fallback，但react17省略就会向上找fallback，如果没找到就会报错</li>
</ul>
<h2 id="八、其他更新"><a href="#八、其他更新" class="headerlink" title="八、其他更新"></a>八、其他更新</h2><ul>
<li>如果React返回一个空组件，React17只允许返回null,React也允许返回undefined。</li>
<li>组件卸载更新状态的警告删除。</li>
</ul>
]]></content>
      <tags>
        <tag>前端笔记</tag>
      </tags>
  </entry>
</search>
