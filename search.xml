<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/PPX-LuBing/PPX-LuBing/2022/10/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello blog</title>
    <url>/PPX-LuBing/PPX-LuBing/2022/10/22/Hello-blog/</url>
    <content><![CDATA[<h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><h2 id="网络安全汇总"><a href="#网络安全汇总" class="headerlink" title="网络安全汇总"></a>网络安全汇总</h2><ul>
<li>XSS</li>
<li>CSRF</li>
<li>iframe安全</li>
<li>SQL注入</li>
<li>OS注入</li>
<li>请求劫持</li>
<li>DDOS  </li>
<li>中间人攻击<span id="more"></span></li>
</ul>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote>
<p>Cross Site Scripting 又叫做跨站脚本攻击,本身应该叫做CSS,但是由于CSS被占用,无奈下叫做XSS</p>
</blockquote>
<h4 id="xss危害"><a href="#xss危害" class="headerlink" title="xss危害"></a>xss危害</h4><ul>
<li>利⽤虚假输⼊表单骗取⽤户个⼈信息。</li>
<li>利⽤脚本窃取⽤户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li>
<li>显示伪造的⽂章或图⽚。</li>
</ul>
<h4 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h4><ol>
<li>存储型（Server端）<ul>
<li>场景： 见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。 </li>
<li>攻击步骤：<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，服务端将恶意代码从数据库中取出来，拼接在HTML中返回给浏览器</li>
<li>用户浏览器在收到响应后解析执行，混在其中的恶意代码也同时被执行</li>
<li>恶意代码窃取用户数据，并发送到指定攻击者的网站，或者冒充用户行为，调用目标网站的接口，执行恶意操作</li>
</ol>
</li>
</ul>
</li>
<li>反射型（Server端）<ul>
<li>与存储型的区别在于，存储型的恶意代码存储在数据库中，反射型的恶意代码在URL上</li>
<li>场景： 通过 URL 传递参数的功能，如网站搜索、跳转等。</li>
<li>攻击步骤：<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
</li>
</ul>
</li>
<li>Dom型（浏览器端）<ul>
<li>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</li>
<li>场景：通过 URL 传递参数的功能，如网站搜索、跳转等。</li>
<li>攻击步骤：<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL。 </li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。 </li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><blockquote>
<p>防止攻击者提交恶意代码，防止浏览器执行恶意代码</p>
</blockquote>
<ul>
<li>设置HEAD  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">0</span>) <span class="comment">// 禁⽌XSS过滤</span></span><br></pre></td></tr></table></figure></li>
<li>设置HttpOnly Cookie  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是预防XSS攻击窃取⽤户cookie最有效的防御⼿段。Web应 ⽤程序在设置cookie时，将其属性设为HttpOnly，就可以避免该⽹⻚的cookie被客户端恶意JavaScript窃取，保护⽤户cookie信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">response.<span class="title function_">addHeader</span>(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;uid=112; Path=/; HttpOnly&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>CSP<ul>
<li>内容安全策略 (CSP, Content Security Policy) 是⼀个附加的安全层，⽤于帮助检测和缓解某些类型的攻击，包括跨站脚本 (XSS) 和数据注⼊等攻击。 这些攻击可⽤于实现从数据窃取到⽹站破坏或作为恶意软件分发版本等⽤途。</li>
<li>CSP 本质上就是建⽴⽩名单，由浏览器进行拦截。开发者明确告诉浏览器哪些外部资源可以加载和执⾏。我们只需要配置规则，如何拦截是由浏览器⾃⼰实现的。我们可以通过这种⽅式来尽量减少 XSS 攻击。</li>
<li>Content-Security-Policy: default-src ‘self’ -所有内容均来自站点的同一个源（不包括其子域名）</li>
<li>Content-Security-Policy: default-src ‘self’ *.trusted.com-允许内容来自信任的域名及其子域名 (域名不必须与CSP设置所在的域名相同)</li>
<li>Content-Security-Policy: default-src <a href="https://link.juejin.cn/?target=https://xxxx.com-%25E8%25AF%25A5%25E6%259C%258D%25E5%258A%25A1%25E5%2599%25A8%25E4%25BB%2585%25E5%2585%2581%25E8%25AE%25B8%25E9%2580%259A%25E8%25BF%2587HTTPS%25E6%2596%25B9%25E5%25BC%258F%25E5%25B9%25B6%25E4%25BB%2585%25E4%25BB%258Exxxx.com%25E5%259F%259F%25E5%2590%258D%25E6%259D%25A5%25E8%25AE%25BF%25E9%2597%25AE%25E6%2596%2587%25E6%25A1%25A3" title="https://xxxx.com-%E8%AF%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%85%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87HTTPS%E6%96%B9%E5%BC%8F%E5%B9%B6%E4%BB%85%E4%BB%8Exxxx.com%E5%9F%9F%E5%90%8D%E6%9D%A5%E8%AE%BF%E9%97%AE%E6%96%87%E6%A1%A3">xxxx.com-该服务器仅允许通过HTTPS方式并仅从xxxx.com域名来访问文档</a></li>
</ul>
</li>
<li>对数据进行严格的输出编码：如HTML元素的编码，JS编码，CSS编码，URL编码等等<br>  <code>避免拼接 HTML； * Vue/React 技术栈，避免使用 v-html / dangerouslySetInnerHTML</code></li>
<li>输入验证：比如一些常见的数字、URL、电话号码、邮箱地址等等做校验判断</li>
<li>验证码</li>
</ul>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote>
<p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是⼀种常⻅的Web攻击，它利⽤⽤户已登录的身份，在⽤户毫不知情的情况下，以⽤户的名义完成⾮法操作</p>
</blockquote>
<h4 id="CSRF定义"><a href="#CSRF定义" class="headerlink" title="CSRF定义"></a>CSRF定义</h4><p>还是从字面上去分析,跨站还是指从一个网站指向另外一个网站,于XSS不同的是,他是请求,指我们在别的网站上发出一个请求,而这个请求是伪造出来的</p>
<p>⽤户已经登录了站点 A，并在本地记录了 cookie</p>
<p>在⽤户没有登出站点 A 的情况下（也就是 cookie ⽣效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。</p>
<p>站点 A 没有做任何 CSRF 防御</p>
<p>攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>
<h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol>
<li>受害者登录 a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问了b.com </li>
<li>b.com 向 a.com 发送了一个请求：a.com&#x2F;act&#x3D;xx浏览器会默认携带a.com的Cookie </li>
<li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求 </li>
<li>a.com以受害者的名义执行了act&#x3D;xx </li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作</li>
</ol>
<h4 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h4><ol>
<li>ET型：如在页面的某个 img 中发起一个 get 请求 </li>
<li>POST型：通过自动提交表单到恶意网站 </li>
<li>链接型：需要诱导用户点击链接</li>
</ol>
<h4 id="CSRF危害"><a href="#CSRF危害" class="headerlink" title="CSRF危害"></a>CSRF危害</h4><ul>
<li>利⽤⽤户登录状态 </li>
<li>⽤户不知情 </li>
<li>完成业务请求 </li>
<li>盗取⽤户资⾦（转账，消费）</li>
<li>冒充⽤户发帖背锅 </li>
<li>损害⽹站声誉</li>
</ul>
<h4 id="防御CSRF"><a href="#防御CSRF" class="headerlink" title="防御CSRF"></a>防御CSRF</h4><blockquote>
<p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。</p>
</blockquote>
<ol>
<li>禁⽌第三⽅⽹站带Cookie - 有兼容性问题 Samesite Cookie属性： Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性 它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie Samesite 有两个属性值，Strict 为任何情况下都不可以作为第三方 Cookie ，Lax 为可以作为第三方 Cookie，但必须是Get请求 </li>
<li>Referer Check - Https不发送referer </li>
<li>验证码</li>
<li>同源检测：通过Header中的Origin Header 、Referer Header 确定，但不同浏览器可能会有不一样的实现，不能完全保证 </li>
<li>CSRF Token 校验：将CSRF Token输出到页面中（通常保存在Session中），页面提交的请求携带这个Token，服务器验证Token是否正确 </li>
<li>双重cookie验证：<br>  流程：<br>  步骤1：在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie&#x3D;v8g9e4ksfhw）<br>  步骤2：在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST <a href="https://www.a.com/comment?csrfcookie=v8g9e4ksfhw%EF%BC%89">https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）</a><br>  步骤3：后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。<br> 优点：<br>   1）、无需使用Session，适用面更广，易于实施<br>   2）、Token储存于客户端中，不会给服务器带来压力。<br>   3）、相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。<br> 缺点：<br> 1）、Cookie中增加了额外的字段。<br> 2）、如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。<br> 3）、难以做到子域名的隔离。<br> 4）、为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</li>
</ol>
<h3 id="iframe安全"><a href="#iframe安全" class="headerlink" title="iframe安全"></a>iframe安全</h3><h4 id="iframe劫持"><a href="#iframe劫持" class="headerlink" title="iframe劫持"></a>iframe劫持</h4><ol>
<li>嵌入第三方 iframe 会有很多不可控的问题，同时当第三方 iframe 出现问题或是被劫持之后，也会诱发安全性问题 </li>
<li>点击劫持 点击劫持是⼀种视觉欺骗的攻击⼿段。 攻击者将需要攻击的⽹站通过iframe嵌套的⽅式嵌⼊⾃⼰的⽹⻚中，并将 iframe 设置为透明，在⻚⾯中透出⼀个按钮诱导⽤户点击。 </li>
<li>禁止自己的 iframe 中的链接外部网站的JS</li>
</ol>
<h4 id="预防方案"><a href="#预防方案" class="headerlink" title="预防方案"></a>预防方案</h4><ol>
<li>为 iframe 设置 sandbox 属性，通过它可以对iframe的行为进行各种限制，充分实现“最小权限“原则 </li>
<li>服务端设置 X-Frame-Options Header头，拒绝页面被嵌套，X-Frame-Options 是HTTP 响应头中用来告诉浏览器一个页面是否可以嵌入 &lt;iframe&gt; 中 eg.X-Frame-Options: SAMEORIGIN SAMEORIGIN: iframe 页面的地址只能为同源域名下的页面 ALLOW-FROM: 可以嵌套在指定来源的 iframe 里 DENY: 当前页面不能被嵌套在 iframe 里 </li>
<li>设置 CSP 即 Content-Security-Policy 请求头 </li>
<li>减少对 iframe 的使用</li>
</ol>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote>
<p>sql是我们学习数据库的一种语言,而注入就代表是从前端对数据库下手<br>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗数据库服务器执行恶意的SQL命令,从而达到和服务器 进行直接的交互</p>
</blockquote>
<h4 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h4><p>其实防御起来很简单,每个语言都提供了不同的方式,但是原理就是**<em>不进行字符串拼接,而是用占位符</em>**</p>
<ol>
<li>严格限制Web应⽤的数据库的操作权限**，给此⽤户提供仅仅能够满⾜其⼯作的最低权限，从⽽最⼤限度的减少注⼊攻击对数据库的危害 </li>
<li>对进⼊数据库的特殊字符（’，”，\，&lt;，&gt;，&amp;，*，; 等）进⾏转义处理，或编码转换**。基本上所有的后端语⾔都有对字符串进⾏转义处理的⽅法，⽐如 lodash 的 lodash._escapehtmlchar库。 </li>
<li>后端代码检查输⼊的数据是否符合预期**，严格限制变量的类型，例如使⽤正则表达式进⾏⼀些匹配处理。</li>
</ol>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><blockquote>
<p>在 http 数据提交给 TCP 层之后，会经过用户电脑、路由器、运营商、服务器，这中间每一个环节，都不是安全的<br>一句话就是：<strong>在 http 传输过程中容易被中间人窃取、伪造、篡改</strong>，这种攻击方式称为<code>中间人攻击</code>。<br>那怎么让数据可以更安全的传输呢？<br>就是使用 https ，利用 https 安全层对数据进行加解密操作，以保证数据安全。<br>关于 https性能优化、版本、优缺点、SSL&#x2F;TLS、握手(RSA、TLS1.2、TLS1.3)三个版本及优化等等，文章太长这里就不展开了，可以看我另一篇文章有详细介绍</p>
</blockquote>
<h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><p>就是加密和解密使用同一个密钥。如<code>AES、DES</code>。加解密过程：</p>
<ol>
<li>浏览器给服务器并发送一个随机数<code>client-random</code>和<code>加密套件</code>(一个支持的加密方法列表)</li>
<li>服务器生成给浏览器返回另一个随机数<code>server-random</code>和<code>加密套件</code></li>
<li>两边分别返回确认消息。然后两者用加密方法将两个随机数混合生成密钥，这就是通信双上加解密的密钥</li>
</ol>
<p>有了密钥之后就可以对数据进行加密传输了</p>
<p>问题是<code>client-random</code>和<code>server-random</code>都是明文的，双方如何安全的传递两个随机数和加密方法呢？直接传给客户端，那过程中就很可能被窃取，中间人还是能解密拿到数据，往下看</p>
<h4 id="不对称加密算法"><a href="#不对称加密算法" class="headerlink" title="不对称加密算法"></a>不对称加密算法</h4><p>就是一对密钥，有<code>公钥</code>(public key)和<code>私钥</code>(private key)，其中一个密钥加密后的数据，只能用另一个密钥进行解密。如<code>RSA</code>、<code>ECDHE</code>。加解密过程：</p>
<ol>
<li>浏览器给服务器发送<code>加密套件</code></li>
<li>服务器选好支持的<code>加密方法</code>和<code>公钥</code>(明文) 传给浏览器</li>
<li>两边分别返回确认消息。然后浏览器用公钥对数据进行加密，这个密钥只能用<code>私钥</code>解密</li>
</ol>
<p>这是不是看上去很完美了</p>
<p>其实还存在很严重的问题</p>
<ol>
<li>使用公钥反推出私钥是非常困难，但不是做不到，随着计算机运算能力提高，非对称密钥<code>至少要2048位才能保证安全性</code>，这就导致加解密速度慢，效率太低</li>
<li>无法保证服务器发送给浏览器的数据安全。因为浏览器可以用公钥来加密，而服务器就只能用私钥加密，公钥是明文传输的，中间人可以获取到，这样服务器端的数据安全就得不到保证了</li>
</ol>
<p>所以！</p>
<h4 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h4><p>TLS实际用的是<code>两种算法的混合加密</code>。<strong>通过 非对称加密算法 交换 对称加密算法 的密钥，交换完成后，再使用对称加密进行加解密传输数据</strong>。这样就保证了会话的机密性。过程如下</p>
<ol>
<li>浏览器给服务器发送一个随机数<code>client-random</code>、<code>对称和非对称加密套件</code></li>
<li>服务器把另一个随机数<code>server-random</code>、<code>加密套件</code>、<code>公钥</code>传给浏览器</li>
<li>浏览器又生成另一个随机数<code>pre-random</code>，并用公钥对 <code>pre-random</code> 加密后传给服务器</li>
<li>服务器再用私钥解密，得到<code>pre-random</code>，并返回确认消息</li>
<li>这样浏览器和服务器都有三个随机数了，然后各自将三个随机数用加密方法混合生成最终的对称密钥</li>
</ol>
<p>然后开始数据加密传输</p>
<p>这样即便被截持，中间人没有私钥就拿不到<code>pre-random</code>，就无法生成最终密钥</p>
<p>这样就安全了吗？</p>
<p>emmmm……还没</p>
<p>因为问题又来了，如果一开始DNS就被<code>中间人劫持</code>，那么请求被中间人截获，中间人把他自己的服务器公钥给了浏览器，浏览器收到公钥就把信息发给中间人了，中间人解密拿到数据，并干了一些见不得人的勾当之后，再请求实际服务器，拿到服务器公钥，再把加密处理过后的数据发给服务器</p>
<p>这样不知不觉间信息就被人窃取了，所以在结合对称和非对称加密的基础上，还需要服务器向浏览器证明身份，那怎么证明呢？</p>
<p>所以<code>数字证书</code>来了，往下看</p>
<h4 id="如何保证数据是否被篡改？"><a href="#如何保证数据是否被篡改？" class="headerlink" title="如何保证数据是否被篡改？"></a>如何保证数据是否被篡改？</h4><h5 id="数字证书-数字签名"><a href="#数字证书-数字签名" class="headerlink" title="数字证书(数字签名)"></a>数字证书(数字签名)</h5><p>它可以帮我们<code>验证服务器身份</code>，而且数字证书里包含了公钥，而数字证书需要向有权威的<code>认证机构(CA)</code>获取授权给服务器。</p>
<p>相比之前就变成了</p>
<ul>
<li>服务器不直接返回公钥给浏览器，而是返回数字证书，而公钥就在数字证书中</li>
<li>浏览器这边多了一步证书验证，验证成功才能继续后续流程</li>
</ul>
<h3 id="那么如何申请数字证书呢？"><a href="#那么如何申请数字证书呢？" class="headerlink" title="那么如何申请数字证书呢？"></a>那么如何申请数字证书呢？</h3><ul>
<li>首先，服务器准备一套<code>公钥</code>和<code>私钥</code>，私钥留着自己用</li>
<li>服务器将公钥和站点等信息提交给CA认证，这个是<code>要钱</code>的</li>
<li>CA<code>验证</code>服务器提供的信息</li>
<li>审核通过后签发认证的数字证书，包含了<code>公钥</code>、<code>CA信息</code>、<code>有效时间</code>、<code>证书序列</code>等这些都是明文的，还有一个CA生成的<code>签名</code></li>
</ul>
<h5 id="CA的签名过程"><a href="#CA的签名过程" class="headerlink" title="CA的签名过程"></a>CA的签名过程</h5><ul>
<li>CA也有一套<code>公钥</code>和<code>私钥</code></li>
<li>CA使用摘要算法计算服务器提交的明文信息并得出<code>信息摘要</code></li>
<li>然后CA再用它的私钥和特定的算法对信息摘要加密，生成<code>签名</code></li>
<li>把<code>签名</code>、<code>服务器公钥</code>等信息打包<code>放入数字证书</code>，并返回给服务器</li>
<li>服务器配置好证书，以后浏览器连接服务器，都先把证书发给客户端验证</li>
</ul>
<blockquote>
<p>摘要算法：主要用于保证信息的完整性。常见的<strong>MD5算法</strong>、<strong>散列函数</strong>、<strong>hash函数</strong>都属于这类算法，其特点就是<code>单向性</code>、<code>无法反推原文</code></p>
</blockquote>
<h5 id="浏览器如何验证数字证书"><a href="#浏览器如何验证数字证书" class="headerlink" title="浏览器如何验证数字证书"></a>浏览器如何验证数字证书</h5><ul>
<li>浏览器连接服务器，都先把证书发给客户端验证</li>
<li>使用<strong>CA公钥</strong>和声明的签名算法对CA中的签名进行<strong>解密</strong>，得到服务器的<code>摘要内容</code>和服务器公钥</li>
<li>再用摘要算法对证书里的服务器公钥生成摘要，再把这个摘要和上一步得到的摘要<code>对比</code></li>
<li>然后将两个信息摘要对比，如果是一致的，就说明证书是合法的，即证明了服务器自己，否则就是非法的</li>
</ul>
<p>证书认证又分为<code>单向认证</code>和<code>双向认证</code></p>
<p><strong>单向认证</strong>：服务器发送证书，客户端验证证书<br><strong>双向认证</strong>：服务器和客户端分别提供证书给对方，并互相验证对方的证书</p>
<p><strong>不过大多数https服务器都是单向认证，如果服务器需要验证客户端的身份，一般通过用户名、密码、手机验证码等之类的凭证来验证。只有更高级别的要求的系统，比如大额网银转账等，就会提供双向认证的场景，来确保对客户身份提供认证性</strong></p>
<p>另外在申请和使用证书的过程中，需要注意</p>
<ul>
<li>申请数字证书是不需要提供私钥的，<strong>要确保私钥永远只能由服务器掌握</strong></li>
<li><strong>数字证书最核心的是CA使用它的私钥生成的数字签名</strong></li>
<li>内置CA对应的证书称为根证书，根证书是最权威的机构，它们自己为自己签名，这称为<code>自签名证书</code></li>
</ul>
<p>有了这些之后就安全了吗？</p>
<p>emmmmm…..没有</p>
<p>虽然不是绝对安全，但是现行架构下最安全的解决文案了，大大增加了中间人的攻击成本</p>
]]></content>
  </entry>
</search>
